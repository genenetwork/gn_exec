defmodule GnExec.Cmd do
  @callback script(any) :: String.t

  @doc ~S"""
  Execute a command  and return its state and its stdout/stderr. Within loop would be possible to dipatch
  messages to some handler for monitoring the job activity (attach to some GenEnvent)

      iex> GnExec.Cmd.exec("ls")
      {0, ['LICENSE\nREADME.md\n_build\nconfig\ndoc\nlib\nmix.exs\ntest\n'], nil}

  """
  def exec(cmd, job, output_callback, transfer_callback) do
    # TODO in case of exception the directory is not removed and task can not start
    #      make it more robust
    command = apply(cmd, :script, job.args) # calling the script function dynamically
    token_path = Path.absname(job.token) # create the directory and run the script from there
    File.mkdir!(token_path) # The directory should not exist, if it exists maybe another task is running the same job
    port=Port.open({:spawn, command},[:stream, :exit_status, :use_stdio, :stderr_to_stdout, {:cd, token_path}])
    # TODO: maybe introduce callback to set up the status for the job {progress: 0}
    when_its_over = loop(port, [],0, output_callback)
    # Pack the files generated by the job in a tar.gz archive

    # transfer files generated by the scripts and saved in the working directory
    # POST to token etc.... all files
    # consider to post also the checksum and verify that file is correct
    # Remove the local
    pack_file = pack(job, token_path)
    transfer_callback.(job, pack_file)
    File.rm_rf!(token_path)
    File.rm!(pack_file)
    when_its_over
  end

  @doc ~S"""
  Timeout could be used in the future to check is the process is still alive or not

  """
  defp loop(port, cache, timeout, output) do
    receive do
      {^port, {:data, data}} ->
        output.(data)
        loop(port, [data | cache], timeout, output)
      {^port, {:exit_status, exit_status}} ->
        {exit_status, Enum.reverse(cache), output}
    end
  end

  @doc ~S"""
  Create a tar archive gzipped of the whole job directory. Returns the full path
  archive.

  """
  defp pack(job, path) do
    archive = "#{job.token}.tar.gz"
    System.cmd("tar",["-C", path, "-zcvf", archive, "."])
    Path.absname(archive)
  end
end
